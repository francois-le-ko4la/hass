services:
  #############################################################################
  # DNS AND SECURITY
  #############################################################################
  adguardhome:
    container_name: adguardhome
    image: adguard/adguardhome
    environment:
      - TZ=${TIME_ZONE}
    volumes:
      - "${DOCKER_ROOT}/adguard-home/work:/opt/adguardhome/work"
      - "${DOCKER_ROOT}/adguard-home/conf:/opt/adguardhome/conf"
      - "${DOCKER_ROOT}/adguard-home/log:/var/log"
      - "/etc/letsencrypt:/etc/letsencrypt:ro"
    network_mode: host
    depends_on:
      traefik:
        condition: service_healthy
      authelia:
        condition: service_healthy
      bind9:
        condition: service_healthy
    cap_add:
      - NET_ADMIN
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.adguard.entrypoints=websecure"
      - "traefik.http.routers.adguard.rule=Host(`adguardhome.${HOST}`)"
      - "traefik.http.routers.adguard.tls=true"
      - "traefik.http.routers.adguard.tls.certresolver=myresolver"
      - "traefik.http.routers.adguard.middlewares=authelia@docker,adguard-basicauth"
      - "traefik.http.middlewares.adguard-basicauth.headers.customrequestheaders.Authorization=Basic ${ADGUARD_AUTH}"
      - "traefik.http.routers.adguard.service=adguard"
      - "traefik.http.services.adguard.loadbalancer.server.port=3000"
      - "deunhealth.restart.on.unhealthy=true"
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --spider http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  bind9:
    image: ubuntu/bind9:latest
    container_name: bind9
    environment:
      - BIND9_USER=root
      - TZ=${TIME_ZONE}
    networks:
      admin-net:
        ipv4_address: 172.20.0.250
    expose:
      - 53/tcp
      - 53/udp
    volumes:
      - "${DOCKER_ROOT}/bind9/config:/etc/bind"
      - "${DOCKER_ROOT}/bind9/cache:/var/cache/bind"
      - "${DOCKER_ROOT}/bind9/records:/var/lib/bind"
      - "${DOCKER_ROOT}/bind9/run:/run/named"
    labels:
      - "deunhealth.restart.on.unhealthy=true"
    healthcheck:
      test: ["CMD", "rndc", "status"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  #############################################################################
  # UPGRADE
  #############################################################################
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    environment:
      - TZ=${TIME_ZONE}
        #- WATCHTOWER_SCHEDULE=0 0 0 * */1 *
      - WATCHTOWER_SCHEDULE=0 0 6 * * 6
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_REVIVE_STOPPED=false
      - WATCHTOWER_NOTIFICATIONS=shoutrrr
      - WATCHTOWER_NOTIFICATION_URL=${WATCHTOWER_NOTIFICATION_URL}
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      admin-net:
        ipv4_address: 172.20.0.10
    restart: unless-stopped

  wud:
    container_name: wud
    image: getwud/wud:latest
    networks:
      admin-net:
        ipv4_address: 172.20.0.30
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - "${DOCKER_ROOT}/wud:/store"
    environment:
      - TZ=${TIME_ZONE}
      - WUD_LOG_LEVEL=info
      - WUD_LOG_FORMAT=text
      - WUD_SERVER_PORT=2000
      - WUD_WATCHER_LOCAL_SOCKET=/var/run/docker.sock
      - WUD_WATCHER_LOCAL_CRON=0 0 4 * * *
      - WUD_WATCHER_LOCAL_WATCHBYDEFAULT=true
      - WUD_TRIGGER_DISCORD_1_URL=${WUD_TRIGGER_DISCORD}
      - WUD_TRIGGER_DISCORD_1_BOTUSERNAME="WUD"
      - WUD_TRIGGER_DOCKER_UPDATE_PRUNE=true
    expose:
      - "2000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.wud.entrypoints=websecure"
      - "traefik.http.routers.wud.rule=Host(`wud.${HOST}`)"
      - "traefik.http.routers.wud.tls=true"
      - "traefik.http.routers.wud.tls.certresolver=myresolver"
      - "traefik.http.routers.wud.middlewares=authelia@docker"
      - "traefik.http.routers.wud.service=wud"
      - "traefik.http.services.wud.loadbalancer.server.port=2000"
      - "deunhealth.restart.on.unhealthy=true"

    healthcheck:
      test: ["CMD-SHELL", "curl -fsSk http://localhost:2000/ -o /dev/null || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  #############################################################################
  # HOME ASSISTANT
  #############################################################################
  home-assistant:
    container_name: home-assistant
    image: homeassistant/home-assistant:latest
    privileged: true
    network_mode: host
    cap_add:
      - SYS_NICE
    environment:
      - TZ=${TIME_ZONE}
      - DISABLE_JEMALLOC=true
    volumes:
      - "${HASS_ROOT}/home-assistant/config:/config"
      - "/etc/letsencrypt:/etc/letsencrypt:ro"
      - "/etc/localtime:/etc/localtime:ro"
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "/run/dbus:/run/dbus:ro"
    depends_on:
      adguardhome:
        condition: service_healthy
      mariadb:
        condition: service_healthy
      zigbee2mqtt:
        condition: service_healthy
    labels:
      - "deunhealth.restart.on.unhealthy=true"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsSk https://localhost:8123/ -o /dev/null || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 90s
    restart: unless-stopped

  mariadb:
    image: linuxserver/mariadb
    container_name: mariadb
    networks:
      iot-net:
        ipv4_address: 172.21.0.2
    expose:
      - "3306/tcp"
    environment:
      - TZ=${TIME_ZONE}
      - MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD
      - MYSQL_DATABASE=$MYSQL_DATABASE
      - MYSQL_USER=$MYSQL_USER
      - MYSQL_PASSWORD=$MYSQL_PASSWORD
      - PUID=1000
      - PGID=1000
    volumes:
      - "${HASS_ROOT}/mariadb:/config"
    labels:
      - "deunhealth.restart.on.unhealthy=true"
    healthcheck:
      test: ["CMD-SHELL", "mariadb -h localhost -P 3306 -u root -p\"$MYSQL_ROOT_PASSWORD\" -e 'SELECT 1;' || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  emqx:
    image: emqx/emqx:latest
    container_name: emqx
    networks:
      iot-net:
        ipv4_address: 172.21.0.3
      admin-net:
        ipv4_address: 172.20.0.11
    expose:
      - 1883/tcp
      - 8083/tcp
      - 8084/tcp
      - 8883/tcp
      - 18083/tcp
    environment:
      - EMQX_NODE_NAME=emqx@172.21.0.3
      - EMQX_NODE__COOKIE=${EMQX_NODE__COOKIE}
      - EMQX_DASHBOARD__DEFAULT_USERNAME=${EMQX_DASHBOARD__DEFAULT_USERNAME}
      - EMQX_DASHBOARD__DEFAULT_PASSWORD=${EMQX_DASHBOARD__DEFAULT_PASSWORD}
    volumes:
      - "${HASS_ROOT}/emqx/data:/opt/emqx/data"
      - "${HASS_ROOT}/emqx/log:/opt/emqx/log"
    depends_on:
      traefik:
        condition: service_healthy
      authelia:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=admin-net"
      - "traefik.http.routers.emqx.entrypoints=websecure"
      - "traefik.http.routers.emqx.rule=Host(`emqx.${HOST}`)"
      - "traefik.http.routers.emqx.tls=true"
      - "traefik.http.routers.emqx.tls.certresolver=myresolver"
      - "traefik.http.routers.emqx.middlewares=authelia@docker"
      - "traefik.http.services.emqx.loadbalancer.server.port=18083"
      - "deunhealth.restart.on.unhealthy=true"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsSk http://localhost:18083/status -o /dev/null || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  zigbee2mqtt:
    container_name: zigbee2mqtt
    image: koenkk/zigbee2mqtt:latest
    #sometime image: 'koenkk/zigbee2mqtt:latest-dev' ^^
    networks:
      iot-net:
        ipv4_address: 172.21.0.4
      admin-net:
        ipv4_address: 172.20.0.9
    expose:
      - "8080/tcp"
    environment:
      - TZ=${TIME_ZONE}
    # - DEBUG=zigbee-herdsman* for debug
    devices:
      - >-
        $ZIGBEE_ADAPTER_TTY:/dev/ttyUSB0
    volumes:
      - "${HASS_ROOT}/zigbee2mqtt/data:/app/data"
      - "/run/udev:/run/udev:ro"
    depends_on:
      traefik:
        condition: service_healthy
      authelia:
        condition: service_healthy
      emqx:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=admin-net"
      - "traefik.http.routers.z2mqtt.entrypoints=websecure"
      - "traefik.http.routers.z2mqtt.rule=Host(`z2mqtt.${HOST}`)"
      - "traefik.http.routers.z2mqtt.tls=true"
      - "traefik.http.routers.z2mqtt.tls.certresolver=myresolver"
      - "traefik.http.routers.z2mqtt.middlewares=authelia@docker"
      - "traefik.http.services.z2mqtt.loadbalancer.server.port=8080"
      - "deunhealth.restart.on.unhealthy=true"
    healthcheck:
      test: "wget --no-verbose --tries=1 --spider http://localhost:8080 -o /dev/null || exit 1"
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  node-red:
    container_name: node-red
    image: nodered/node-red:latest
    environment:
      - TZ=${TIME_ZONE}
    networks:
      iot-net:
        ipv4_address: 172.21.0.5
      admin-net:
        ipv4_address: 172.20.0.8
    expose:
      - "1880/tcp"
    volumes:
      - "${HASS_ROOT}/node-red/data:/data"
    depends_on:
      traefik:
        condition: service_healthy
      authelia:
        condition: service_healthy
      home-assistant:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=admin-net"
      - "traefik.http.routers.nodered.entrypoints=websecure"
      - "traefik.http.routers.nodered.rule=Host(`nodered.${HOST}`)"
      - "traefik.http.routers.nodered.tls=true"
      - "traefik.http.routers.nodered.tls.certresolver=myresolver"
      - "traefik.http.routers.nodered.middlewares=authelia@docker"
      - "traefik.http.routers.nodered.service=nodered"
      - "traefik.http.services.nodered.loadbalancer.server.port=1880"
      - "deunhealth.restart.on.unhealthy=true"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsSk http://localhost:1880/ -o /dev/null || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  ha-linky:
    image: ha-linky
    container_name: ha-linky
    networks:
      iot-net:
        ipv4_address: 172.21.0.6
    environment:
      - SUPERVISOR_TOKEN=${SUPERVISOR_TOKEN}
      - WS_URL=wss://${HOST}:8123/api/websocket
    volumes:
      - "${HASS_ROOT}/ha-linky:/data"
    depends_on:
      home-assistant:
        condition: service_healthy
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
      - "wud.watch=false"
      - "deunhealth.restart.on.unhealthy=true"
    healthcheck:
      test: "kill -0 1 > /dev/null || exit 1"
    restart: unless-stopped

  #############################################################################
  # Traefik
  #############################################################################

  traefik:
    container_name: traefik
    image: traefik:latest
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --entrypoints.websecure.address=:6643
      - --entrypoints.websecure.http.tls=true
      - --entrypoints.websecure.http3
      - --entrypoints.websecure.http3.advertisedPort=6643
      - --entrypoints.wireguard.address=:51820/udp
      - --providers.docker.exposedByDefault=false
      - --serverstransport.insecureskipverify=true
      - --certificatesresolvers.myresolver.acme.dnschallenge=true
      - --certificatesresolvers.myresolver.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.myresolver.acme.email=${MAIL}
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
      - --log=true
      - --log.level=ERROR
      - --log.filepath=/var/log/traefik.log
      - --accesslog.filepath=/var/log/traefik-access.log
      - --ping=true
    networks:
      admin-net:
        ipv4_address: 172.20.0.2
    ports:
      - "6643:6643/tcp"
      - "6643:6643/udp"
      - "51820:51820/udp"
    expose:
      - "8080/tcp"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "${DOCKER_ROOT}/traefik/letsencrypt:/letsencrypt"
      - "/etc/timezone:/etc/timezone:ro"
      - "/etc/localtime:/etc/localtime:ro"
      - "${DOCKER_ROOT}/traefik/log:/var/log/"
    environment:
      - CF_DNS_API_TOKEN=${CLOUDFLARE_API_KEY}
    extra_hosts:
      - host.docker.internal:172.17.0.1
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${HOST}`)"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=myresolver"
      - "traefik.http.routers.traefik.middlewares=authelia@docker"
      - "traefik.http.routers.traefik.service=traefik"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    restart: unless-stopped

  traefik-acme-converter:
    container_name: traefik-acme-converter
    image: ko4la/traefik-acme-converter
    # git clone https://github.com/francois-le-ko4la/traefik-acme-converter.git
    # cd traefik-acme-converter
    # docker build -t ko4la/traefik-acme-converter .
    networks:
      admin-net:
        ipv4_address: 172.20.0.6
    environment:
      - PROVIDER_NAME=myresolver.acme
      - WEBHOOK_URL=${TRAEFIK_ACME_DISCORD_WH}
      - USER_UID=0
      - USER_GID=0
    volumes:
      - ${DOCKER_ROOT}/traefik/letsencrypt:/traefik/letsencrypt:ro
      - /etc/letsencrypt/live:/app/output
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
      - "wud.watch=false"
    healthcheck:
      test: "kill -0 1 > /dev/null || exit 1"
    restart: unless-stopped

  authelia:
    image: authelia/authelia
    container_name: authelia
    networks:
      admin-net:
        ipv4_address: 172.20.0.3
    expose:
      - 9091
    environment:
      - TZ=${TIME_ZONE}
    volumes:
      - "${DOCKER_ROOT}/authelia/config:/config"
    depends_on:
      traefik:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=admin-net"
      - "traefik.http.routers.authelia.entrypoints=websecure"
      - "traefik.http.routers.authelia.rule=Host(`auth.${HOST}`)"
      - "traefik.http.routers.authelia.tls=true"
      - "traefik.http.routers.authelia.tls.certresolver=myresolver"
      - "traefik.http.middlewares.authelia.forwardauth.address=http://authelia:9091/api/authz/forward-auth" # yamllint disable-line rule:line-length
      - "traefik.http.middlewares.authelia.forwardauth.trustForwardHeader=true"
      - "traefik.http.middlewares.authelia.forwardauth.authResponseHeaders=Remote-User,Remote-Groups,Remote-Name,Remote-Email" # yamllint disable-line rule:line-length
      - "traefik.http.routers.authelia.service=authelia"
      - "traefik.http.services.authelia.loadbalancer.server.port=9091"
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:9091/api/health",
          "-O",
          "/dev/null",
        ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

###############################################################################
# Tools
###############################################################################

  vscode:
    container_name: vscode
    image: linuxserver/code-server:latest
    networks:
      admin-net:
        ipv4_address: 172.20.0.20
    expose:
      - 8443/tcp
    environment:
      - PUID=0
      - PGID=0
      - TZ=${TIME_ZONE}
    volumes:
      - "${DOCKER_ROOT}/vscode/config:/config"
      - "${DOCKER_ROOT}:/config/workspace"
    depends_on:
      traefik:
        condition: service_healthy
      authelia:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=admin-net"
      - "traefik.http.routers.vscode.entrypoints=websecure"
      - "traefik.http.routers.vscode.rule=Host(`vscode.${HOST}`)"
      - "traefik.http.routers.vscode.tls=true"
      - "traefik.http.routers.vscode.tls.certresolver=myresolver"
      - "traefik.http.routers.vscode.middlewares=authelia@docker"
      - "traefik.http.routers.vscode.service=vscode"
      - "traefik.http.services.vscode.loadbalancer.server.port=8443"
    healthcheck:
      test: "curl -fs http://localhost:8443/ -o /dev/null || exit 1"
    restart: unless-stopped

  portainer:
    container_name: portainer
    image: portainer/portainer-ee:latest
    networks:
      admin-net:
        ipv4_address: 172.20.0.4
    expose:
      #- 9443/tcp
      - 9000/tcp
    environment:
      - CSP=false
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "portainer_data:/data"
    depends_on:
      traefik:
        condition: service_healthy
      authelia:
        condition: service_healthy
    command: --http-enabled --log-level ERROR
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=admin-net"
      - "traefik.http.routers.portainer.entrypoints=websecure"
      - "traefik.http.routers.portainer.rule=Host(`portainer.${HOST}`)"
      - "traefik.http.routers.portainer.tls=true"
      - "traefik.http.routers.portainer.tls.certresolver=myresolver"
      - "traefik.http.routers.portainer.middlewares=authelia@docker"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
      - "deunhealth.restart.on.unhealthy=true"
    healthcheck:
      test: ["CMD", "/docker", "container", "top", "portainer"]
    restart: unless-stopped

  duplicati:
    container_name: duplicati
    image: lscr.io/linuxserver/duplicati:latest
    networks:
      admin-net:
        ipv4_address: 172.20.0.7
    expose:
      - 8200/tcp
    environment:
      - PUID=0
      - PGID=0
      - TZ=${TIME_ZONE}
      - SETTINGS_ENCRYPTION_KEY=2XxckW6KSZn0Va8l7L34hVXDnDFnu0sl2qWb+cZrBj0=
      - DUPLICATI__WEBSERVICE_PASSWORD=${DUPLICATI__WEBSERVICE_PASSWORD} # wait v2.1.2 (stable with PRE_AUTH_TOKENS)
      #- DUPLICATI__WEBSERVICE_PRE_AUTH_TOKENS=mon_super_token123 - wait v2.1.2 (stable)
    volumes:
      - "${DOCKER_ROOT}/duplicati/config:/config"
      - "/:/source"
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=admin-net"
      - "traefik.http.routers.duplicati.entrypoints=websecure"
      - "traefik.http.routers.duplicati.rule=Host(`duplicati.${HOST}`)"
      - "traefik.http.routers.duplicati.tls=true"
      - "traefik.http.routers.duplicati.tls.certresolver=myresolver"
      - "traefik.http.routers.duplicati.middlewares=authelia@docker" #,duplicati-headers - wait v2.1.2
      - "traefik.http.routers.duplicati.service=duplicati"
      - "traefik.http.services.duplicati.loadbalancer.server.port=8200"
      #- "traefik.http.middlewares.duplicati-headers.headers.customrequestheaders.Authorization=PreAuth mon_super_token123"
      #- "traefik.http.routers.duplicati.middlewares=duplicati-headers"
      - "deunhealth.restart.on.unhealthy=true"
    healthcheck:
      test: "curl -fs http://localhost:8200/ -o /dev/null || exit 1"
    restart: unless-stopped

  deunhealth:
    image: qmcgaw/deunhealth:latest
    container_name: deunhealth
    network_mode: "none"
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - INTERVAL=30s
      - LOG_LEVEL=info
      - HEALTH_SERVER_ADDRESS=127.0.0.1:9999
      - TZ=${TIME_ZONE}

###############################################################################
# Volume
###############################################################################
volumes:
  portainer_data:
    external: true
  node-red_data:
    name: node-red_data

###############################################################################
# Network
###############################################################################
networks:
  admin-net:
    name: admin-net
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

  iot-net:
    name: iot-net
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
          gateway: 172.21.0.1
