version: '3.8'

services:
  #############################################################################
  # DNS AND SECURITY
  #############################################################################
  adguardhome:
    container_name: adguardhome
    image: adguard/adguardhome
    environment:
      - TZ=$TIME_ZONE
    volumes:
      - '/opt/adguard-home/work:/opt/adguardhome/work'
      - '/opt/adguard-home/conf:/opt/adguardhome/conf'
      - '/etc/letsencrypt:/etc/letsencrypt:ro'
    network_mode: host
    restart: always
    depends_on:
      - bind9
  bind9:
    image: ubuntu/bind9:latest
    container_name: bind9
    environment:
      - BIND9_USER=root
      - TZ=$TIME_ZONE
    networks:
      admin-net:
        ipv4_address: 172.20.0.4
    expose:
      - 53/tcp
      - 53/udp
    volumes:
      - '/opt/bind9/config:/etc/bind'
      - '/opt/bind9/cache:/var/cache/bind'
      - '/opt/bind9/records:/var/lib/bind'
    restart: always
    
  #############################################################################
  # UPGRADE
  #############################################################################
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    environment:
      - TZ=$TIME_ZONE
      - WATCHTOWER_SCHEDULE= 0 0 0 * */1 *
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_NOTIFICATIONS=gotify
      - >-
        WATCHTOWER_NOTIFICATION_GOTIFY_URL=https://$HOST:8143/
      - WATCHTOWER_NOTIFICATION_GOTIFY_TOKEN=$GOTIFY_TOKEN
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
    networks: 
      admin-net:
        ipv4_address: 172.20.0.10
    restart: unless-stopped
    
  #############################################################################
  # Certificats
  #############################################################################
  certbot:
    container_name: certbot
    image: 'certbot/dns-cloudflare:arm64v8-latest'
    environment:
      - TZ=$TIME_ZONE
    command: >-
      certonly --non-interactive --dns-cloudflare --dns-cloudflare-credentials
        /opt/cloudflare/credentials --email $MAIL
        --dns-cloudflare-propagation-seconds 15 --agree-tos
        -d $HOST
    volumes:
      - '/opt/certbot/cloudflare:/opt/cloudflare'
      - '/etc/letsencrypt:/etc/letsencrypt'
      - '/var/log/letsencrypt:/var/log/letsencrypt'
    networks:
      admin-net:
        ipv4_address: 172.20.0.20
        
  #############################################################################
  # HOME ASSISTANT
  #############################################################################
  home-assistant:
    container_name: home-assistant
    #image: 'homeassistant/home-assistant:latest'
    image: 'ghcr.io/home-assistant/home-assistant:stable'
    volumes:
      - '/opt/hass/home-assistant/config:/config'
      - '/etc/letsencrypt:/etc/letsencrypt:ro'
      - '/etc/localtime:/etc/localtime:ro'
      - '/var/run/docker.sock:/var/run/docker.sock'
      - '/run/dbus:/run/dbus:ro'
    environment:
      - TZ=$TIME_ZONE
      - DISABLE_JEMALLOC=true
    restart: always
    network_mode: host
    privileged: true
    depends_on:
      - mariadb
      - emqx
      - zigbee2mqtt
  mariadb:
    image: linuxserver/mariadb
    container_name: mariadb
    restart: unless-stopped
    environment:
      - TZ=$TIME_ZONE
      - MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD
      - MYSQL_DATABASE=$MYSQL_DATABASE
      - MYSQL_USER=$MYSQL_USER
      - MYSQL_PASSWORD=$MYSQL_PASSWORD
      - PUID=1000
      - PGID=1000
    volumes:
      - '/opt/hass/mariadb:/config'
    networks:
      iot-net:
        ipv4_address: 172.21.0.2
    ports:
      - '3306:3306'
  emqx:
    image: emqx/emqx:latest
    container_name: emqx
    privileged: true
    restart: unless-stopped
    environment:
      - EMQX_NODE_NAME=emqx@172.21.0.3
      - EMQX_DASHBOARD__DEFAULT_USERNAME=${EMQX_DASHBOARD__DEFAULT_USERNAME}
      - EMQX_DASHBOARD__DEFAULT_PASSWORD=${EMQX_DASHBOARD__DEFAULT_PASSWORD}
    volumes:
      - '/opt/hass/emqx/data:/opt/emqx/data'
      - '/opt/hass/emqx/log:/opt/emqx/log'
    networks:
      iot-net:
        ipv4_address: 172.21.0.3
      admin-net:
        ipv4_address: 172.20.0.11
    ports:
      - 1883:1883
      - 8083:8083
      - 8084:8084
      - 8883:8883
    expose:
      - 18083/tcp
  zigbee2mqtt:
    container_name: zigbee2mqtt
    image: 'koenkk/zigbee2mqtt:latest'
    #sometime image: 'koenkk/zigbee2mqtt:latest-dev' ^^
    privileged: true
    volumes:
      - '/opt/hass/zigbee2mqtt/data:/app/data'
      - '/run/udev:/run/udev:ro'
    environment:
      - TZ=$TIME_ZONE
    # - DEBUG=zigbee-herdsman* for debug
    devices:
      - >- 
        $ZIGBEE_ADAPTER_TTY:/dev/ttyUSB0
    networks:
      iot-net:
        ipv4_address: 172.21.0.4
      admin-net:
        ipv4_address: 172.20.0.9
    ports:
      - "8080:8080"
    restart: always
  node-red:
    container_name: node-red
    image: 'nodered/node-red:latest'
    privileged: true
    environment:
      - TZ=$TIME_ZONE
    networks:
      iot-net:
        ipv4_address: 172.21.0.5
      admin-net:
        ipv4_address: 172.20.0.8
    expose:
      - '1880/tcp'
    volumes:
      - '/opt/hass/node-red/data:/data'
    depends_on:
      - home-assistant
    restart: always
  nginx:
    container_name: nginx
    image: 'nginx:latest'
    hostname: nginx
    volumes:
      - '/opt/nginx/config:/etc/nginx/conf.d'
      - '/etc/letsencrypt:/etc/letsencrypt'
    environment:
      - TZ=$TIME_ZONE
    networks:
      admin-net:
        ipv4_address: 172.20.0.2
    ports:
      - '443:443/tcp'
      - '51821:51821/tcp'
      - '8100:8100/tcp'
      - '8200:8200/tcp'
      - '9443:9443/tcp'
      - '8143:8143/tcp'
      - '9080:9080/tcp'
      - '1880:1880/tcp'
      - '18083:18083/tcp'
    depends_on:
      - portainer
      - gotify
      - duplicati
      - wg-easy
      - node-red
      - zigbee2mqtt
      - emqx
    restart: unless-stopped
  portainer:
    container_name: portainer
    image: 'portainer/portainer-ee:latest'
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
      - 'portainer_data:/data'
    networks:
      admin-net:
        ipv4_address: 172.20.0.3
    expose:
      - 9443/tcp
    restart: always
  gotify:
    container_name: gotify
    image: gotify/server-arm64
    networks:
      admin-net:
        ipv4_address: 172.20.0.6
    expose:
      - 80/tcp
    environment:
      - TZ=$TIME_ZONE
      - GOTIFY_SERVER_SSL_ENABLED=false
    volumes:
      - '/opt/gotify/data:/app/data'
    restart: always
  duplicati:
    container_name: duplicati
    image: 'lscr.io/linuxserver/duplicati:latest'
    networks:
      admin-net:
        ipv4_address: 172.20.0.7
    expose:
      - 8200/tcp
    environment:
      - PUID=0
      - PGID=0
      - TZ=$TIME_ZONE
    volumes:
      - '/opt/duplicati/config:/config'
      - '/:/source'
    restart: always
  wg-easy:
    container_name: wg-easy
    image: weejewel/wg-easy
    networks:
      admin-net:
        ipv4_address: 172.20.0.5
    ports:
      - '51820:51820/udp'
    expose:
      - 51821/tcp
    environment:
      - WG_HOST=$WG_HOST
      - PASSWORD=$WG_PASSWORD
    volumes:
      - '/opt/wg-easy/config:/etc/wireguard'
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv4.ip_forward=1
    restart: always

###############################################################################
# Volume
###############################################################################
volumes:
  portainer_data:
    external: true
  node-red_data:
    name: node-red_data

###############################################################################
# Network
###############################################################################
networks:
  admin-net:
    name: "admin"
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
  iot-net:
    name: "iot"
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
          gateway: 172.21.0.1
